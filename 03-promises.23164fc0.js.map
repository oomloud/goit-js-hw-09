{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAW,CACfC,KAAMC,SAASC,cAAc,UAGCC,EAAAJ,EAASC,KAAKI,SAAtCC,EAAwBF,EAAxBG,MAAOC,EAAiBJ,EAAjBK,KAAMC,EAAWN,EAAXO,OAEjBC,EAAiB,EACjBC,EAAkB,EAEtBb,EAASC,KAAKa,iBAAiB,UAE/B,SAAuBC,GACrBA,EAAIC,iBACJH,GAAmBP,EAAMW,MAETC,YAAW,WAEzB,IAAMC,EAAaC,aAAY,WAC7B,GAAIR,KAAoBF,EAAOO,MAAQ,EAAvC,CAIA,IAsBiBI,EAAUC,EAtBrBC,GAsBWF,EAtBaT,EAsBHU,EAtBmBT,EAuB3C,IAAIW,SAAQ,SAACC,EAAKC,GACDC,KAAKC,SAAW,GAGpCH,EAAI,CAAEJ,WAAUd,MAAAe,IAIhBI,EAAI,CAAEL,WAAUd,MAAAe,G,KA9BhBV,IACAC,IAAoBL,EAAKS,MAEzBM,EACGM,MAAK,SAAAC,GAIJ,OAHAhC,EAAAiC,OAAOC,QACL,uBAA6CC,OAApBH,EAAKT,SAAS,QAAiBY,OAAXH,EAAKvB,MAAM,OAEnDuB,C,IAERI,OAAM,SAAAC,GACLrC,EAAAiC,OAAOK,QACL,sBAAyCH,OAAnBE,EAAId,SAAS,QAAgBY,OAAVE,EAAI5B,MAAM,M,SAhBvD8B,cAAclB,E,IAmBdX,EAAKS,OAETL,EAAiB,C,IACfN,EAAMW,M,IAkBZnB,EAAAiC,OAAOO,KAAK,CACVjB,SAAU,YACVkB,MAAO,QACPC,SAAU,OACVC,SAAS,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst elements = {\n  form: document.querySelector('.form'),\n};\n\nconst { delay, step, amount } = elements.form.elements;\n\nlet promiseCounter = 1;\nlet cumulativeDelay = 0; // variable to store cumulative response time (initial delay + step * number of steps)\n\nelements.form.addEventListener('submit', submitHandler);\n\nfunction submitHandler(evt) {\n  evt.preventDefault();\n  cumulativeDelay = +delay.value;\n  // setting initial delay for the first promice\n  const timerId = setTimeout(() => {\n    //\n    const intervalId = setInterval(() => {\n      if (promiseCounter === +amount.value + 1) {\n        clearInterval(intervalId);\n        return;\n      }\n      const promise = createPromise(promiseCounter, cumulativeDelay);\n      promiseCounter++;\n      cumulativeDelay += +step.value;\n\n      promise\n        .then(data => {\n          Notify.success(\n            `✅ Fulfilled promise ${data.position} in ${data.delay}ms`\n          );\n          return data;\n        })\n        .catch(err => {\n          Notify.failure(\n            `❌ Rejected promise ${err.position} in ${err.delay}ms`\n          );\n        });\n    }, +step.value);\n    // resetting counter of promises in case user wants to start again without refreshing the page\n    promiseCounter = 1;\n  }, +delay.value);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      res({ position, delay });\n      // console.log(shouldResolve);\n    } else {\n      // Reject\n      rej({ position, delay });\n      // console.log(shouldResolve);\n    }\n  });\n}\n\nNotify.init({\n  position: 'right-top',\n  width: '360px',\n  fontSize: '16px',\n  useIcon: false,\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$elements","form","document","querySelector","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$delay","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","$ce04d3a99e08e73b$var$promiseCounter","$ce04d3a99e08e73b$var$cumulativeDelay","addEventListener","evt","preventDefault","value","setTimeout","intervalId","setInterval","position","delay1","promise","Promise","res","rej","Math","random","then","data","Notify","success","concat","catch","err","failure","clearInterval","init","width","fontSize","useIcon"],"version":3,"file":"03-promises.23164fc0.js.map"}