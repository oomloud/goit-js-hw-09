{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAW,CACfC,KAAMC,SAASC,cAAc,WAGzBC,MAAEC,EAAKC,KAAEC,EAAIC,OAAEC,GAAWT,EAASC,KAAKS,SAE9C,IAAIC,EAAiB,EACjBC,EAAkB,EAEtBZ,EAASC,KAAKY,iBAAiB,UAE/B,SAAuBC,GACrBA,EAAIC,iBACJH,GAAmBP,EAAMW,MAETC,YAAW,KAEzB,MAAMC,EAAaC,aAAY,KAC7B,GAAIR,KAAoBF,EAAOO,MAAQ,EAErC,YADAI,cAAcF,GAGhB,MAAMG,GAsBWC,EAtBaX,EAsBHY,EAtBmBX,EAuB3C,IAAIY,SAAQ,CAACC,EAAKC,KACDC,KAAKC,SAAW,GAGpCH,EAAI,C,SAAEH,EAAUlB,MAAAmB,IAIhBG,EAAI,C,SAAEJ,EAAUlB,MAAAmB,GAAQ,KAT9B,IAAuBD,EAAUC,EArB3BZ,IACAC,IAAoBL,EAAKS,MAEzBK,EACGQ,MAAKC,IACJhC,EAAAiC,OAAOC,QACL,uBAAqBF,EAAIR,eAAkBQ,EAAE1B,WAExC0B,KAERG,OAAMC,IACLpC,EAAAiC,OAAOI,QACL,sBAAoBD,EAAEZ,eAAiBY,EAAE9B,UAAY,GAEvD,IACFG,EAAKS,OAETL,EAAiB,CAAC,IAChBN,EAAMW,M,IAkBZlB,EAAAiC,OAAOK,KAAK,CACVd,SAAU,YACVe,MAAO,QACPC,SAAU,OACVC,SAAS","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst elements = {\n  form: document.querySelector('.form'),\n};\n\nconst { delay, step, amount } = elements.form.elements;\n\nlet promiseCounter = 1;\nlet cumulativeDelay = 0; // variable to store cumulative response time (initial delay + step * number of steps)\n\nelements.form.addEventListener('submit', submitHandler);\n\nfunction submitHandler(evt) {\n  evt.preventDefault();\n  cumulativeDelay = +delay.value;\n  // setting initial delay for the first promice\n  const timerId = setTimeout(() => {\n    //\n    const intervalId = setInterval(() => {\n      if (promiseCounter === +amount.value + 1) {\n        clearInterval(intervalId);\n        return;\n      }\n      const promise = createPromise(promiseCounter, cumulativeDelay);\n      promiseCounter++;\n      cumulativeDelay += +step.value;\n\n      promise\n        .then(data => {\n          Notify.success(\n            `✅ Fulfilled promise ${data.position} in ${data.delay}ms`\n          );\n          return data;\n        })\n        .catch(err => {\n          Notify.failure(\n            `❌ Rejected promise ${err.position} in ${err.delay}ms`\n          );\n        });\n    }, +step.value);\n    // resetting counter of promises in case user wants to start again without refreshing the page\n    promiseCounter = 1;\n  }, +delay.value);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      res({ position, delay });\n      // console.log(shouldResolve);\n    } else {\n      // Reject\n      rej({ position, delay });\n      // console.log(shouldResolve);\n    }\n  });\n}\n\nNotify.init({\n  position: 'right-top',\n  width: '360px',\n  fontSize: '16px',\n  useIcon: false,\n});\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$elements","form","document","querySelector","delay","$47d4ff9957288465$var$delay","step","$47d4ff9957288465$var$step","amount","$47d4ff9957288465$var$amount","elements","$47d4ff9957288465$var$promiseCounter","$47d4ff9957288465$var$cumulativeDelay","addEventListener","evt","preventDefault","value","setTimeout","intervalId","setInterval","clearInterval","promise","position","delay1","Promise","res","rej","Math","random","then","data","Notify","success","catch","err","failure","init","width","fontSize","useIcon"],"version":3,"file":"03-promises.bb48b83e.js.map"}