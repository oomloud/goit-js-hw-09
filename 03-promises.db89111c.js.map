{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAW,CACfC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,WAEhCK,EAAiB,EACjBC,EAAkB,EAEtBT,EAASC,KAAKS,iBAAiB,UAE/B,SAAuBC,GACrBA,EAAIC,iBACJH,GAAmBT,EAASI,MAAMS,MAElBC,YAAW,WACzB,IAAMC,EAAaC,aAAY,WAC7B,GAAIR,KAAoBR,EAASM,OAAOO,MAAQ,EAAhD,CAIA,IAsBiBI,EAAUb,EAtBrBc,GAsBWD,EAtBaT,EAsBHJ,EAtBmBK,EAuB3C,IAAIU,SAAQ,SAACC,EAAKC,GACDC,KAAKC,SAAW,GAGpCH,EAAI,CAAEH,WAAUb,UAIhBiB,EAAI,CAAEJ,WAAUb,S,KA9BhBI,IACAC,IAAoBT,EAASK,KAAKQ,MAElCK,EACGM,MAAK,SAAAC,GAIJ,OAHA3B,EAAA4B,OAAOC,QACL,uBAA6CC,OAApBH,EAAKR,SAAS,QAAiBW,OAAXH,EAAKrB,MAAM,OAEnDqB,C,IAERI,OAAM,SAAAC,GACLhC,EAAA4B,OAAOK,QACL,sBAAyCH,OAAnBE,EAAIb,SAAS,QAAgBW,OAAVE,EAAI1B,MAAM,M,SAhBvD4B,cAAcjB,E,IAmBdf,EAASK,KAAKQ,OAElBL,EAAiB,C,OAmBrBV,EAAA4B,OAAOO,KAAK,CACVhB,SAAU,YACViB,MAAO,QACPC,SAAU,OACVC,SAAS,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst elements = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button'),\n};\nlet promiseCounter = 1;\nlet cumulativeDelay = 0;\n\nelements.form.addEventListener('submit', submitHandler);\n\nfunction submitHandler(evt) {\n  evt.preventDefault();\n  cumulativeDelay = +elements.delay.value;\n\n  const timerId = setTimeout(() => {\n    const intervalId = setInterval(() => {\n      if (promiseCounter === +elements.amount.value + 1) {\n        clearInterval(intervalId);\n        return;\n      }\n      const promise = createPromise(promiseCounter, cumulativeDelay);\n      promiseCounter++;\n      cumulativeDelay += +elements.step.value;\n\n      promise\n        .then(data => {\n          Notify.success(\n            `✅ Fulfilled promise ${data.position} in ${data.delay}ms`\n          );\n          return data;\n        })\n        .catch(err => {\n          Notify.failure(\n            `❌ Rejected promise ${err.position} in ${err.delay}ms`\n          );\n        });\n    }, +elements.step.value);\n    // resetting counter of promises in case user wants to start again without refreshing the page\n    promiseCounter = 1;\n  });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      res({ position, delay });\n      // console.log(shouldResolve);\n    } else {\n      // Reject\n      rej({ position, delay });\n      // console.log(shouldResolve);\n    }\n  });\n}\n\nNotify.init({\n  position: 'right-top',\n  width: '360px',\n  fontSize: '16px',\n  useIcon: false,\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$elements","form","document","querySelector","delay","step","amount","btnSubmit","$ce04d3a99e08e73b$var$promiseCounter","$ce04d3a99e08e73b$var$cumulativeDelay","addEventListener","evt","preventDefault","value","setTimeout","intervalId","setInterval","position","promise","Promise","res","rej","Math","random","then","data","Notify","success","concat","catch","err","failure","clearInterval","init","width","fontSize","useIcon"],"version":3,"file":"03-promises.db89111c.js.map"}